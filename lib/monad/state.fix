// State Monad which maintains a mutable state.
module Minilib.Monad.State;

import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Monad.IO;

// A trait for the interface of generic state monads.
trait MonadState = Monad + MonadStateIF;

// A trait for generic state monads that manages the internal state.
trait [sm: * -> *] sm: MonadStateIF {
    // The type of the internal state.
    type StateType sm;
    // A monad that returns the internal state as a value.
    get_state: sm (StateType sm);
    // A monad that puts the specified value to the internal state.
    put_state: (StateType sm) -> sm ();
}

// A monad that modifies the current state with the specified function.
mod_state: [sm: MonadState] (StateType sm -> StateType sm) -> sm ();
mod_state = |f| put_state $ f $ *get_state;

//------------------------------------------------------------------------

// State monad wraps a function from a initial state to a pair of a value and a final state.
type [m: *->*] StateT s m a = unbox struct {
    data: s -> m (s, a)
};

type State s a = StateT s Identity a;

// Creates a StateT monad from a function.
make_state_t_monad: [m: Monad] (s -> m (s, a)) -> StateT s m a;
make_state_t_monad = |f| StateT { data: f };

// Creates a State monad from a function.
make_state_monad: (s -> (s, a)) -> State s a;
make_state_monad = |f| make_state_t_monad(f >> pure);

// Runs a StateT monad with the supplied initial state.
run_state_t: [m: Monad] s -> StateT s m a -> m (s, a);
run_state_t = |s, ma| (ma.@data)(s);

// Runs a State monad with the supplied initial state.
run_state: s -> State s a -> (s, a);
run_state = |s, ma| ma.run_state_t(s).get;

// Runs a StateT monad with the supplied initial state and return the final value, discarding the final state.
eval_state_t: [m: Monad] s -> StateT s m a -> m a;
eval_state_t = |s, ma| (
    let (s, a) = *ma.run_state_t(s);
    pure $ a
);

// Runs a State monad with the supplied initial state and return the final value, discarding the final state.
eval_state: s -> State s a -> a;
eval_state = |s, ma| ma.eval_state_t(s).get;

// Runs a StateT monad with the supplied initial state and return the final state, discarding the final value.
exec_state_t: [m: Monad] s -> StateT s m a -> m s;
exec_state_t = |s, ma| (
    let (s, a) = *ma.run_state_t(s);
    pure $ s
);

// Runs a State monad with the supplied initial state and return the final state, discarding the final value.
exec_state: s -> State s a -> s;
exec_state = |s, ma| ma.exec_state_t(s).get;

// Maps both the return value and final state.
map_state_t: [m: Monad, n: Monad] (m (s, a) -> n (s, a)) -> StateT s m a -> StateT s n b;
map_state_t = |f, ma| (
    make_state_t_monad $ (ma.@data) >> f
);

impl [m: Monad] StateT s m: Functor {
    map = |f, ma| make_state_t_monad $ |s| (
        let (ss, a) = *ma.run_state_t(s);
        pure $ (ss, f(a))
    );
}

impl [m: Monad] StateT s m: Monad
{
    pure = |a| StateT { data: |s| pure((s, a)) };
    bind = |f, ma| StateT { data: |s|
        let (s, a) = *ma.run_state_t(s);
        f(a).run_state_t(s)
    };
}

impl [m: Monad] StateT s m: MonadStateIF {
    type StateType (StateT s m) = s;
    get_state = make_state_t_monad $ |s| pure $ (s, s);
    put_state = |s| make_state_t_monad $ |_| pure $ (s, ());
}

impl StateT s: MonadTrans {
    lift_t = |ma| (
        make_state_t_monad $ |s|
        let a = *ma;
        pure $ (s, a)
    );
}

impl [m: MonadError] StateT s m: MonadErrorIF {
    error = lift_t << error;
    catch = |handler, sma| (
        make_state_t_monad $ |s|
        sma.run_state_t(s).catch(
            handler >> run_state_t(s)
        )
    );
}

impl [m: MonadIO] StateT s m: MonadIOIF {
    lift_io = lift_t << lift_io;
}

impl [m: MonadIOFail] StateT s m: MonadIOFailIF {
    lift_iofail = lift_t << lift_iofail;
}

// Transforms a state monad with an lens action.
// For example, if `Foo` has a field `bar: Bar`, then `act_bar` is a function of type
// `[f: Functor] (bar -> f bar) -> (foo -> f foo)`.
// Using `act_bar`, a state monad of `Bar` can be transformed to a state monad of `Foo`.
// ```
// change_bar: StateT Bar IO ();
// change_bar = ...;
// change_foo: StateT Foo IO ();
// change_foo = change_bar.lens_state_t(Foo::act_bar);
// ```
// Note that `act_xxx` can be composed, for example `Foo::act_bar << Bar::act_baz << Baz::act_qux`.
lens_state_t: [m: Monad, m: Functor] ((s -> PairLT a m s) -> (t -> PairLT a m t)) -> StateT s m a -> StateT t m a;
lens_state_t = |act, sma| (
    let f: s -> m (s, a) = sma.@data;
    let f: s -> PairLT a m s = f >> PairLT::make;
    let f: t -> PairLT a m t = act(f);
    let f: t -> m (t, a) = f >> PairLT::get;
    make_state_t_monad(f)
);

lens_state: ((s -> PairLT a Identity s) -> (t -> PairLT a Identity t)) -> State s a -> State t a;
lens_state = lens_state_t;
