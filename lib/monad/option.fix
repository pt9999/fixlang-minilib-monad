// A monad transformer that wraps `m (Option a)`.
module Minilib.Monad.Option;

import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Monad.IO;

// A monad transformer that wraps `m (Option a)`.
// This represents an optional value which may or may not exist.
// `m` is a type of an underlying monad.
// `a` is a type of a value.
type [m: * -> *] OptionT m a = unbox struct {
    data: m (Option a)
};

// Creates an OptionT monad from an optional value.
option_t: [m: * -> *] m (Option a) -> OptionT m a;
option_t = |ma| OptionT { data: ma };

// Gets the optional value.
run_option_t: [m: * -> *] OptionT m a -> m (Option a);
run_option_t = @data;

// Lifts an optional value to an `OptionT` monad.
lift_option: [m: Monad] Option a -> OptionT m a;
lift_option = |opt| option_t $ pure(opt);

impl [m: Functor] OptionT m: Functor {
    map = |f, ma| (
        option_t $ ma.run_option_t.map(map(f))
    );
}

impl [m: Monad] OptionT m: Monad {
    pure = |a| option_t(pure(pure(a)));
    bind = |f, ma| (
        option_t $ do {
            match *ma.run_option_t {
                none() => pure $ none(),
                some(a) => f(a).run_option_t
            }
        }
    );
}

impl OptionT: MonadTrans {
    lift_t = |ma| option_t $ ma.bind(some >> pure);
}

impl [m: MonadError] OptionT m: MonadErrorIF {
    error = lift_t << error;
    catch = |handler, ma| (
        option_t $
        ma.run_option_t.catch(
            handler >> run_option_t
        )
    );
}

impl [m: MonadIO] OptionT m: MonadIOIF {
    lift_io = lift_t << lift_io;
}

impl [m: MonadIOFail] OptionT m: MonadIOFailIF {
    lift_iofail = lift_t << lift_iofail;
}
